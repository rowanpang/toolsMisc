"language
    let $LANG='en_US'
    set langmenu=en_US

"keymap leader
    "map <silent> [map] [cmd]: will not show cmd in window,exp:
    "map <silent> <leader>1 :diffget 1<CR> :diffupdate<CR>
    let mapleader = ","		    "default is \
    let maplocalleader = ','	    "default is \

"snippet
    "ref software/editor/vim/plugin/snippet.txt
    ":help snippet

"vim-plug to manage plugin. ref https://github.com/junegunn/vim-plug
    "plugs will be install in plugged/xxx/*  'xxx' subdir named as plugin.
    ":PlugInstall :PlugClen ...
    call plug#begin()
	Plug 'https://github.com/SirVer/ultisnips'
	Plug 'https://github.com/honza/vim-snippets.git'
	Plug 'https://github.com/artur-shaik/vim-javacomplete2.git'
	Plug 'https://github.com/Shougo/unite.vim.git'
	Plug 'scrooloose/syntastic'		"语法检查
	Plug 'majutsushi/tagbar'		"单文件tag
	Plug 'tpope/vim-fugitive'		"for git :Gstatus
	Plug 'bling/vim-airline'
	Plug 'rowanpang/nerdtree'		"Plug 'scrooloose/nerdtree'
	Plug 'scrooloose/nerdcommenter'
	Plug 'ervandew/supertab'
	Plug 'valloric/youcompleteme'
	Plug 'yggdroot/indentline'
	Plug 'raimondi/delimitmate'
	Plug 'tpope/vim-surround'
	Plug 'kien/ctrlp.vim'
	Plug 'easymotion/vim-easymotion'
	Plug 'nathanaelkane/vim-indent-guides'
	Plug 'altercation/vim-colors-solarized'
	Plug 'skywind3000/asyncrun.vim'
	Plug 'wannesm/wmgraphviz.vim'
	Plug 'mileszs/ack.vim'
	Plug 'godlygeek/tabular'
	Plug 'juneedahamed/vc.vim'
	Plug 'plasticboy/vim-markdown'
	"Plug 'hynek/vim-python-pep8-indent'
	Plug 'tell-k/vim-autopep8'
	Plug 'vim-scripts/DrawIt'
	"Plug 'doxygen/doxygen'
	Plug 'vim-scripts/DoxygenToolkit.vim'
	Plug 'fatih/vim-go'
	Plug 'mattn/webapi-vim'
	"Plug 'mattn/excelview-vim'
	"Plug 'vim-scripts/excel.vim'
	Plug 'vim-latex/vim-latex'
	Plug 'aklt/plantuml-syntax'

	"-----orgMode
	Plug 'jceb/vim-orgmode'
	Plug 'vim-scripts/utl.vim'
	Plug 'tpope/vim-speeddating'
	Plug 'mattn/calendar-vim'
	Plug 'vim-scripts/SyntaxRange'
	Plug 'tpope/vim-repeat'
	"orgModeEnd------

	Plug 'rykka/riv.vim'		"xx.rst file

	Plug 'ekalinin/dockerfile.vim'

	Plug 'chrisbra/csv.vim'
    call plug#end()
    "
"ack/ag
    let g:ackprg = 'ag --vimgrep --smart-case'

    let g:plantuml_set_makeprg = 0

"strip trailing space
    autocmd BufWritePre * %s/\s\+$//e

"vc plugin mapping
    map <silent> <leader>vB :VCBlame<CR>
    map <silent> <leader>vd :VCDiff<CR>
    map <silent> <leader>vdf :VCDiff!<CR>
    map <silent> <leader>vs :VCStatus<CR>
    map <silent> <leader>vsu :VCStatus -u<CR>
    map <silent> <leader>vsq :VCStatus -qu<CR>
    map <silent> <leader>vsc :VCStatus .<CR>
    map <silent> <leader>vl :VCLog!<CR>
    map <silent> <leader>vb :VCBrowse<CR>
    map <silent> <leader>vbm :VCBrowse<CR>
    map <silent> <leader>vbw :VCBrowseWorkingCopy<CR>
    map <silent> <leader>vbr :VCBrowseRepo<CR>
    map <silent> <leader>vbl :VCBrowseMyList<CR>
    map <silent> <leader>vbb :VCBrowseBookMarks<CR>
    map <silent> <leader>vbf :VCBrowseBuffer<CR>
    map <silent> <leader>vq :diffoff! <CR> :q<CR>


"quick run
    let g:quickrun_config = {
	\ "_":{
	\   'outputter':'quickfix',
	\   },
	\}
"asyncrun
    command! -bang -nargs=* -complete=file Make AsyncRun -program=make @ <args>
    "let g:airline_section_error = airline#section#create_right(['%{g:asyncrun_status}'])

    function! AsyncrunStatus(...)
	let builder = a:1
	call builder.add_section('S:','%{g:asyncrun_status}')
	return 0
    endfunction
    "will block gvim need 'enter' trigger on
    "call airline#add_statusline_func('AsyncrunStatus')

"indent-guides
    let g:indent_guides_enable_on_vim_startup = 0
    let g:indent_guides_exclude_filetypes = ['help','vim','nerdtree']
    "au BufReadPost * IndentGuidesEnable
    "<leader>ig

"easymotion
    "ref http://www.wklken.me/posts/2015/06/07/vim-plugin-easymotion.html

"Ctrlp
    "let g:loaded_ctrlp = 1			    "uncomment it if you not want it;
    "let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'  "default values
    let g:ctrlp_by_filename = 1
    let g:ctrlp_regexp = 1
    let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
    let g:ctrlp_open_new_file = 't'		    "open new file created by ctrlp in table.'
    let g:ctrlp_lazy_update = 0

"java complete
    autocmd FileType java setlocal omnifunc=javacomplete#Complete

"check gui
    if has('gui_running')
        "in gui
    else
        "in terminal
    endif

"simalt alt-key
    if has("win32")
        set winaltkeys=yes        "let vim handle <alt-space> for os system menu.
    endif

"backspace del key
    set backspace=indent,eol,start
        "start  allow backspacing over the start of insert; 即可以删除一些insert之前的字符.

"window
    if has("win32")
        au GUIEnter * winsize 125 25
        au GUIEnter * winpos 210 135
        au GUIEnter * simalt ~x    "auto maximum
    endif

    :nmap <silent> <C-h> :wincmd h<CR>		"silent not show cmd map in commandline"
    :nmap <silent> <C-j> :wincmd j<CR>
    :nmap <silent> <C-k> :wincmd k<CR>
    :nmap <silent> <C-l> :wincmd l<CR>
    :nmap <silent> <C-c> :wincmd c<CR>

    augroup BgHighlight
        autocmd!
        autocmd WinEnter * set cul
        autocmd WinLeave * set nocul
    augroup END

"theme solarized
    let g:solarized_termtrans=1
    "let g:solarized_termcolors=256
    call togglebg#map("<F5>")
    colorscheme solarized
    "colorscheme default

    if has('gui_running')
	set background=dark
    else
	set background=dark
    endif

"highlight
    syntax on				" 自动语法高亮
    if $TERM >= "xterm"			" linux vconsole

        hi CursorLine cterm=none ctermbg=Black        "for gnome-terminal rowan-solarDark
	set cursorline			" 突出显示当前行
    else "under terminal TERM == linux
        hi CursorLine cterm=none ctermbg=Gray
	set nocursorline		" 突出显示当前行
    endif
    "set cursorcolumn
        "winent/winleave also can auto set to distinguish cur window
    "set number				" 显示行号

"indent
    set shiftwidth=4            " 设定 << 和 >> 命令移动时的宽度为 4
    set softtabstop=4           " 使得按退格键时可以一次删掉 4 个空格
    set tabstop=8
        "设定tab长度为4,如果ts与sts不相等则，按下tab建缩进sts.
        "exp"ts=8,sts=4,则按下tab建插入的字符为4个' '，连续两个tab插入的为'\t'
    "set expandtab               " 使用空格展开tab
    set autoindent              " or cindent
    set smartindent             " 开启新行时使用智能自动缩进
    filetype indent on
        "ref :help 30.3  :help indentexpr  /usr/share/vim/vim74/indent/*
        let g:pyindent_continue=4
"line wrap
    set textwidth=80
    set breakindent
    au FileType text set textwidth=88

"search
    set nobackup                " 覆盖文件时不备份
    set ignorecase smartcase    " 搜索时忽略大小写，但在有一个或以上大写字母时仍保持对大小写敏感
    "set nowrapscan              " 禁止在搜索到文件两端时重新搜索
    set incsearch               " 输入搜索内容时就显示搜索结果
    set hlsearch                " 搜索时高亮显示被找到的文本
    set hidden                  " 允许在有未保存的修改时切换缓冲区，此时的修改由 vim 负责保存

"vertical list
    "can also be '¦,┆'. for plugins https://github.com/Yggdroot/indentLine
    "set listchars=tab:\¦\ ,eol:$
    "set listchars=tab:\¦\ ,
    "set list			"nolist better manual set when need
    "highlight SpecialKey NONE

    "let g:indentLine_fileType = ['c','cpp','sh','javascript','html']
    let g:indentLine_fileTypeExclude = ['text']
    let g:indentLine_bufTypeExclude = ['help','terminal']

"fold
    "set foldenable             " 开始折叠
    set nofoldenable            " 开始折叠
    set foldmethod=syntax       " 设置语法折叠
    set foldcolumn=0            " 设置折叠区域的宽度
    setlocal foldlevel=1        " 设置折叠层数为

"encoding                       "
    set encoding=utf-8
    set fencs=utf-8,gbk,ucs-bom,latin1

"statusline
    set cmdheight=1             " 设定命令行的行数为 1
    set laststatus=2
    "set statusline=\ %<%F[%n%M%R%H]%=\ %y\ %(%{&fileformat}\ %{&encoding}\ %c:%l/%L%)
    set statusline=\ %<%F[b:%n%M%R%H]%=\ \ %(%c:%l/%L%)

"vimdiff
    if &diff
        map <leader>1 :diffget 1<CR> :diffupdate<CR>
        map <leader>2 :diffget 2<CR> :diffupdate<CR>
        map <leader>3 :diffget 3<CR> :diffupdate<CR>
        map <leader>4 :diffget 4<CR> :diffupdate<CR>

        au BufRead * set filetype=
    endif

"taglist
    nnoremap <F8> :TlistToggle<CR>
    let Tlist_Auto_Highlight_Tag = 1
    let Tlist_Auto_Open = 0
    let Tlist_Exit_OnlyWindow = 1
    let Tlist_GainFocus_On_ToggleOpen = 1
    "let Tlist_File_Fold_Auto_Close = 1
    let Tlist_Close_On_Select = 1
    let Tlist_Highlight_Tag_On_BufEnter = 1
    let Tlist_Show_One_File = 1
    if has("win32")
        let Tlist_Ctags_Cmd = 'C:\Users\pangwz\vimfiles\plugin\ctags.exe'
    endif

"nerdtree
    "managed by Plugin
    nnoremap <F9> :NERDTreeToggle<CR>
    "nnoremap <F9> :NERDTreeFind<CR>
    "options
        let NERDTreeWinPos = "right"
        let NERDTreeShowLineNumbers = 1
        "let NERDTreeQuitOnOpen = 1
        let nerdtree_plugin_open_cmd = 'xdg-open'
	let NERDTreeChDirMode = 2
	"let NERDTreeShowBookmarks = 0
	"let NERDTreeBookmarksFile = '/path/to/file'
	"default is $HOME/.NERDTreeBookmarks

    let g:netrw_nogx = 1	    "use xdg-open files

"nerdcomment
    "managed by Plugin
    "ref:https://github.com/scrooloose/nerdcommenter
    "\ca 转换注释的方式，比如： /**/和//

"ctags
    "nnoremap <leader>csc :cs find c <C-R><C-W>
    "source ~/.vim/plugin/cscope_maps.vim    no need manual source,it will auto sourced
    au FileType python set tags+=$HOME/.vim/tags/python2.ctags

"Makefile
    "----------------for kernel script/Makefile.xx
    au BufRead,BufNewFile Makefile.* set filetype=make

"Binary
    augroup Binary
        au BufReadPre *.bin let &bin=1
        au BufReadPost *.bin if &bin | %!xxd -g 1
        au BufReadPost *.bin set filetype=xxd | endif
    augroup END

"autherinfo
    let g:vimrc_author='Rowan Pang'
    let g:vimrc_email='pangweizhen.2008@hotmail.com'
    let g:vimrc_homepage=''
    nmap <F4> :AuthorInfoDetect<cr>

"rpm spec
    au FileType spec map <buffer> <F5> <Plug>SpecChangelog
    let spec_chglog_format = "%a %b %d %Y RowanPang <pangweizhen.2008@hotmail.com>"
    "let spec_chglog_release_info = 1

"git commit message
    au FileType gitcommit exe "normal gg"

"dictionary
    "in 'insert mode' use tab or c-x_c-k to finish word
    set dictionary+=/usr/share/dict/words

"vim-instant-markdown
    "from https://github.com/suan/vim-instant-markdown
    "use for view md files
    "after/ftplugin/markdown/instant-markdown.vim

"vim tabpage,:help tabp ...
    "for tabline show ref plugin/tabline.vim,autoload.
    noremap <leader>1 1gt
    noremap <leader>2 2gt
    noremap <leader>3 3gt
    noremap <leader>4 4gt
    noremap <leader>5 5gt
    noremap <leader>6 6gt
    noremap <leader>7 7gt
    noremap <leader>8 8gt
    noremap <leader>9 9gt
    noremap <leader>n gt
    noremap <leader>p gT
    "for previous tabpage
    let g:preTab = 1
    noremap <Leader>tl :exe "tabn ".g:preTab<CR>
    au TabLeave * let g:preTab= tabpagenr()
    au TabClosed * exe "normal gT"

"paste
    set pastetoggle=<F2>

"vim-airline
    "managed by Plugin:
    "let g:airline#extensions#tabline#enabled = 1

    if has('gui_running')
        "in gui default is on
    else
	"uncommen below if don't want airline.
        "au VimEnter * if exists('g:loaded_airline') | AirlineToggle | endif
    endif

"fs/dir operation
    "set autochdir    --->should't set for ctags and cscope will work error!!!
    "au BufEnter *.txt lcd %:h   "if open *.txt change to current dir.
    ".vim/plugin/Rename.vim   ---> :Rename newname
    "in NERDTree 'm'-->node operation menu

"dirdiff
    "compare and sync two dir
    ":dirdiff <a> <b>


"supertabl
    "according to context ,ins-complete mode,e.g ctrl-x ctrl-n,ctrl-x ctrl-f,
    let g:SuperTabDefaultCompletionType = "context"

"ycm
    "let g:ycm_log_level = 'info'		"for debug usage
    let g:ycm_log_level = 'error'
    let g:ycm_server_python_interpreter = 'python'

    let g:ycm_key_list_select_completion = ['<c-n>']
    let g:ycm_key_list_previous_completion = ['<c-p>']
    "let g:ycm_key_list_select_completion = ['<Down>']
    "let g:ycm_key_list_previous_completion = ['<Up>']

    let g:ycm_global_ycm_extra_conf = '~/.vim/plugged/youcompleteme/third_party/ycmd/examples/.ycm_extra_conf.py'
    let g:ycm_confirm_extra_conf = 0		    "关闭加载.ycm_extra_conf.py提示

    let g:ycm_seed_identifiers_with_syntax = 1	    " 语法关键字补全
    let g:ycm_autoclose_preview_window_after_insertion = 1	"previewwindow auto close

    let g:ycm_complete_in_comments = 1
    let g:ycm_complete_in_strings = 1
    let g:ycm_collect_identifiers_from_comments_and_strings = 1

    let g:ycm_show_diagnostics_ui = 0		"disable ycm checker use Syntastic's checker

"syntastic
    "let g:syntastic_check_on_open = 1
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_cpp_compiler = 'g++'

"cmdline hotkey
    :cnoremap <C-A> <HOME>
    :cnoremap <C-F> <Right>
    :cnoremap <C-B> <Left>
    :cnoremap <C-B> <Left>
